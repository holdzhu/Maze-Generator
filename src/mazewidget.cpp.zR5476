#include "mazewidget.h"

const int MazeWidget::dx[] = {0, 0, 1, -1};
const int MazeWidget::dy[] = {1, -1, 0, 0};

MazeWidget::MazeWidget() : QGraphicsItem(), status(ARROW), isMouseDown(false),
    showResult(false), pathVisibility(false), distance(2), error(0)
{
    setAcceptHoverEvents(true);
    setFlag(QGraphicsItem::ItemIsSelectable);
}

void MazeWidget::setDrawStatus(MazeWidget::DrawStatus status)
{
    this->status = status;
}

void MazeWidget::setPathVisibility(bool pathVisibility)
{
    this->pathVisibility = pathVisibility;
    update();
}

void MazeWidget::clear()
{
    pathPixmap.fill(Qt::transparent);
    startingPos = QPoint(-1, -1);
    terminalPos = QPoint(-1, -1);
    showResult = false;
    update();
}

void MazeWidget::setDistance(int distance)
{
    this->distance = distance;
}

void MazeWidget::setError(int error)
{
    this->error = error;
}

void MazeWidget::generate()
{
    showResult = true;
    int height = pathPixmap.height();
    int width = pathPixmap.width();
    QImage pathImage = pathPixmap.toImage();
    resultImage = QImage(pathPixmap.size(), QImage::Format_RGB888);
    resultImage.fill(Qt::white);
    std::priority_queue<std::pair<std::pair<qreal, int>, std::pair<std::pair<int, int>, std::pair<int, int> > > > pq;
    std::vector<std::vector<bool> > wall(height);
    auto isValid = [height, width](int x, int y)
    {
        return x >= 0 && x < height && y >= 0 && y < width;
    };
    for (int i = 0; i < height; ++i)
    {
        wall[i].resize(width, 0);
        for (int j = 0; j < width; ++j)
        {
            if (i == 0 || i == height - 1 || j == 0 || j == width - 1)
            {
                wall[i][j] = true;
                resultImage.setPixel(j, i, qRgb(0, 0, 0));
                for (int k = 0; k < 4; ++k)
                {
                    int nx = i + dx[k];
                    int ny = j + dy[k];
                    if (isValid(nx, ny) && !(nx == 0 || nx == height - 1 || ny == 0 || ny == width - 1))
                    {
                        pq.push(std::make_pair(std::make_pair(rand(), width * height),
                                               std::make_pair(std::make_pair(nx, ny), std::make_pair(i, j))));
                    }
                }
            }
        }
    }
    while (!pq.empty())
    {
        int x = pq.top().second.first.first;
        int y = pq.top().second.first.second;
        int lx = pq.top().second.second.first;
        int ly = pq.top().second.second.second;
        int s = pq.top().first.second;
        pq.pop();
        if (qAlpha(pathImage.pixel(y, x)))
        {
            s = qMin(s, error);
        }
        if (wall[x][y] || s <= 0 ||
                (startingPos.x() != -1 &&
                 (startingPos.x() - y) * (startingPos.x() - y)
                 + (startingPos.y() - x) * (startingPos.y() - x) <= 100) ||
                (terminalPos.x() != -1 &&
                 (terminalPos.x() - y) * (terminalPos.x() - y)
                 + (terminalPos.y() - x) * (terminalPos.y() - x) <= 100))
            continue;
        bool flag = true;
        for (int i = qMax(x - distance, 0.0); i <= qMin(x + distance, height - 1.0) && flag; ++i)
        {
            for (int j = qMax(y - distance, 0.0); j <= qMin(y + distance, width - 1.0) && flag; ++j)
            {
                if (wall[i][j] && qMin(hypot(i - x, j - y), distance) < qMin(hypot(i - lx, j - ly), distance))
                {
                    flag = false;
                }
            }
        }
        if (!flag)
            continue;
        wall[x][y] = true;
        resultImage.setPixel(y, x, qRgb(0, 0, 0));
        update();
        setFocus();
        for (int i = 0; i < 4; ++i)
        {
            int nx = x + dx[i];
            int ny = y + dy[i];
            if (isValid(nx, ny) && !wall[nx][ny])
            {
                pq.push(std::make_pair(std::make_pair(rand(), s - 1),
                                       std::make_pair(std::make_pair(nx, ny), std::make_pair(x, y))));
            }
        }
    }
}

void MazeWidget::mousePressEvent(QGraphicsSceneMouseEvent *event)
{
    isMouseDown = true;
    lastPos = event->pos();
    if (status == STARTING)
    {
        showResult = false;
        startingPos = event->pos();
    }
    else if (status == TERMINAL)
    {
        showResult = false;
        terminalPos = event->pos();
    }
    update();
    QGraphicsItem::mousePressEvent(event);
}

void MazeWidget::mouseReleaseEvent(QGraphicsSceneMouseEvent *event)
{
    isMouseDown = false;
    QGraphicsItem::mouseReleaseEvent(event);
}

void MazeWidget::mouseMoveEvent(QGraphicsSceneMouseEvent *event)
{
    if (isMouseDown)
    {
        QPainter painter(&pathPixmap);
        if (status == BRUSH)
        {
            showResult = false;
            painter.setBrush(Qt::red);
            painter.setPen(Qt::red);
            painter.drawLine(lastPos, event->pos());
            lastPos = event->pos();
            update();
        }
        else if (status == ERASER)
        {
            showResult = false;
            painter.setCompositionMode(QPainter::CompositionMode_Clear);
            QPen pen(Qt::transparent);
            pen.setWidth(20);
            painter.setPen(pen);
            painter.drawLine(lastPos, event->pos());
        }
        else if (status == STARTING)
        {
            showResult = false;
            startingPos = event->pos();
        }
        else if (status == TERMINAL)
        {
            showResult = false;
            terminalPos = event->pos();
        }
        lastPos = event->pos();
        update();
    }
    QGraphicsItem::mouseMoveEvent(event);
}

void MazeWidget::hoverMoveEvent(QGraphicsSceneHoverEvent *event)
{
    QGraphicsItem::hoverMoveEvent(event);
}

QRectF MazeWidget::boundingRect() const
{
    return QRectF(QPoint(0, 0), size());
}

void MazeWidget::paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)
{
    painter->setPen(Qt::white);
    painter->setBrush(Qt::white);
    painter->drawRect(boundingRect());
    if (showResult)
    {
        painter->drawImage(0, 0, resultImage);
    }
    if (pathVisibility || !showResult)
    {
        painter->drawPixmap(0, 0, pathPixmap);
    }
    QFont font = painter->font();
    font.setPointSize(font.pointSize() * 2);
    painter->setFont(font);
    if (startingPos.x() != -1)
    {
        painter->setPen(Qt::blue);
        painter->drawText(QRect(startingPos.x() - 10, startingPos.y() - 10, 20, 20), Qt::AlignCenter, tr("S"));
    }
    if (terminalPos.x() != -1)
    {
        painter->setPen(Qt::blue);
        painter->drawText(QRect(terminalPos.x() - 10, terminalPos.y() - 10, 20, 20), Qt::AlignCenter, tr("T"));
    }
}

void MazeWidget::resize(int width, int height)
{
    _size = QSize(width, height);
    pathPixmap = QPixmap(size());
    clear();
    scene()->setSceneRect(boundingRect());
    scene()->update();
}

QSize MazeWidget::size() const
{
    return _size;
}

void MazeWidget::save()
{
    QImage image(boundingRect().size().toSize(), QImage::Format_RGB32);
    image.fill(QColor(0, 0, 0).rgb());
    QPainter painter(&image);
    QStyleOptionGraphicsItem styleOption;
    paint(&painter, &styleOption, NULL);
    painter.end();
    QString path = QFileDialog::getSaveFileName(NULL, tr("Save Image"), tr(""), tr("Image(*.png)"));
    image.save(path);
}


